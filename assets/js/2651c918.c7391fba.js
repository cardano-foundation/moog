"use strict";(globalThis.webpackChunkmy_website=globalThis.webpackChunkmy_website||[]).push([[4378],{8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>s});var t=o(6540);const a={},i=t.createContext(a);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(i.Provider,{value:n},e.children)}},9941:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ops/oracle-role","title":"Oracle role manual","description":"This is the role of the user that wants to run a service to control access to the Antithesis platform. There will be only one token and so there will be only one oracle service running at a time, but we document it here for completeness.","source":"@site/docs/ops/oracle-role.md","sourceDirName":"ops","slug":"/ops/oracle-role","permalink":"/moog/docs/ops/oracle-role","draft":false,"unlisted":false,"editUrl":"https://github.com/cardano-foundation/moog/tree/main/docs/docs/ops/oracle-role.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Moog Protocol","permalink":"/moog/docs/ops/protocol"},"next":{"title":"Agent role manual","permalink":"/moog/docs/ops/agent-role"}}');var a=o(4848),i=o(8453);const l={},s="Oracle role manual",r={},c=[{value:"Running the oracle service",id:"running-the-oracle-service",level:2},{value:"Build",id:"build",level:3},{value:"Running oracle commands manually",id:"running-oracle-commands-manually",level:2},{value:"Creating the moog token (only once)",id:"creating-the-moog-token-only-once",level:2},{value:"Updating the moog token",id:"updating-the-moog-token",level:2},{value:"Deleting the moog token (DANGEROUS)",id:"deleting-the-moog-token-dangerous",level:2},{value:"Publishing the oracle configuration",id:"publishing-the-oracle-configuration",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"oracle-role-manual",children:"Oracle role manual"})}),"\n",(0,a.jsx)(n.p,{children:"This is the role of the user that wants to run a service to control access to the Antithesis platform. There will be only one token and so there will be only one oracle service running at a time, but we document it here for completeness."}),"\n",(0,a.jsx)(n.h2,{id:"running-the-oracle-service",children:"Running the oracle service"}),"\n",(0,a.jsx)(n.p,{children:"You can build an executable that will continuously check for pending requests and include them in the Antithesis token."}),"\n",(0,a.jsx)(n.h3,{id:"build",children:"Build"}),"\n",(0,a.jsx)(n.p,{children:"You can build the oracle service via nix:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nix build .#moog-oracle\n"})}),"\n",(0,a.jsx)(n.p,{children:"On a linux machine you can build a docker container"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nix build .#moog-oracle-docker-image\ndocker load < result\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then you can run the docker container"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"version=$(nix eval .#version --raw)\ndocker run ghcr.io/cardano-foundation/moog/moog-oracle:$version\n"})}),"\n",(0,a.jsx)(n.h2,{id:"running-oracle-commands-manually",children:"Running oracle commands manually"}),"\n",(0,a.jsxs)(n.p,{children:["Alternatively, oracle commands can be run manually, using the ",(0,a.jsx)(n.code,{children:"moog"})," CLI. See the ",(0,a.jsx)(n.a,{href:"/moog/docs/user/installation",children:"Installation instructions"})," for how to install it."]}),"\n",(0,a.jsx)(n.h2,{id:"creating-the-moog-token-only-once",children:"Creating the moog token (only once)"}),"\n",(0,a.jsxs)(n.p,{children:["Oracle operations need a wallet. Since the oracle role is critical, in addition to setting the ",(0,a.jsx)(n.code,{children:"MOOG_WALLET_FILE"})," environment variable to point to the wallet file, you should also set the ",(0,a.jsx)(n.code,{children:"MOOG_WALLET_PASSPHRASE"})," environment variable to encrypt the wallet."]}),"\n",(0,a.jsxs)(n.p,{children:["You can create a wallet with the ",(0,a.jsx)(n.code,{children:"moog wallet create"})," command."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"moog wallet create\n"})}),"\n",(0,a.jsx)(n.p,{children:"The current oracle wallet reports"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"moog wallet info\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "address": "addr_test1vq04e6lvknx3ettppz5xq9x7nk8j87w5gaammke7z2ymyfqtkl4vv",\n  "filePath": "tmp/oracle.json",\n  "owner": "1f5cebecb4cd1cad6108a86014de9d8f23f9d4477bbddb3e1289b224"\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["To create the Antithesis token, you can use the ",(0,a.jsx)(n.code,{children:"moog oracle token create"})," command."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"moog oracle token boot\n"})}),"\n",(0,a.jsxs)(n.p,{children:["It will create the Antithesis token. This token is a unique identifier for the Antithesis platform and will be used by all users to interact with the platform. You have to distribute it so that users can set the ",(0,a.jsx)(n.code,{children:"MOOG_TOKEN_ID"})," environment variable to point to it."]}),"\n",(0,a.jsx)(n.p,{children:"You can review the token info anytime with"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"moog token | jq .state\n"})}),"\n",(0,a.jsx)(n.p,{children:"Critically the owner matches the wallet owner."}),"\n",(0,a.jsx)(n.h2,{id:"updating-the-moog-token",children:"Updating the moog token"}),"\n",(0,a.jsx)(n.p,{children:"The main responsibility of the oracle is to include change requests in the Antithesis token."}),"\n",(0,a.jsxs)(n.p,{children:["Pending change requests can be queried with the ",(0,a.jsx)(n.code,{children:"moog token"})," command."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"moog token | jq '.requests'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In the requests field you will notice the ",(0,a.jsx)(n.code,{children:"validation"})," field, which will be set to ",(0,a.jsx)(n.code,{children:"validated"})," for all requests that have been validated ."]}),"\n",(0,a.jsx)(n.p,{children:"Once you decided what to include in the Antithesis token, you can commit the requests to the token."}),"\n",(0,a.jsxs)(n.p,{children:["Updating the token with new requests is done with the ",(0,a.jsx)(n.code,{children:"moog oracle token update"})," command. As with retract you have to provide the ",(0,a.jsx)(n.code,{children:"outputRefId"})," of the request you want to update. Multiple requests can be updated at once, so you can provide multiple ",(0,a.jsx)(n.code,{children:"-o"})," options."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"moog oracle token update -o b6fc7cca5bcae74e6a5983f7922d0e0985285f1f19e62ccc9cb9fd4d3766a81b-0\n"})}),"\n",(0,a.jsx)(n.h2,{id:"deleting-the-moog-token-dangerous",children:"Deleting the moog token (DANGEROUS)"}),"\n",(0,a.jsxs)(n.p,{children:["To delete the Antithesis token, you can use the ",(0,a.jsx)(n.code,{children:"moog oracle token delete"})," command."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"moog oracle token delete\n"})}),"\n",(0,a.jsx)(n.h2,{id:"publishing-the-oracle-configuration",children:"Publishing the oracle configuration"}),"\n",(0,a.jsx)(n.p,{children:"Before requesters can request test-runs, the oracle should select the agent identity and in general expose validation parameters so that the requesters and the agent can pre-validate their requests."}),"\n",(0,a.jsxs)(n.p,{children:["This is done with the ",(0,a.jsx)(n.code,{children:"moog oracle config set"})," command."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"moog oracle config set  --min-test-duration MIN_TEST_HOURS --max-test-duration MAX_TEST_HOURS --agent-pkh PUBLIC_KEY_HASH\n"})}),"\n",(0,a.jsx)(n.p,{children:"In this situation the oracle is acting like a user and so this request will end up in the Antithesis token as a request for change."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Apply the token update command to commit the request to the Antithesis token"})}),"\n",(0,a.jsxs)(n.p,{children:["This will end up in a fact and so anyone can inspect it with the ",(0,a.jsx)(n.code,{children:"moog facts"})," command."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"moog facts config\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);